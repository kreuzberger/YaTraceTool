{"name":"YaTraceTool","tagline":"Trace / Logging Library in C++ Local or via Network ","body":"YaTraceTool\r\n===========\r\n\r\nTrace / Logging Library in C++ Local or via Network \r\n\r\nThe YaTraceTool supports in tracing message from differen applications by sending them to a central\r\nserver instance which collects the individual messages. An GUI application is also provided to connect\r\nto the server and view and filter the messages.\r\n\r\nMessage filtering is not only done on the gui side, the filters are send to the local applications to reduce\r\napplication load and to enable / disable filters at runtime.\r\n\r\nThe YaTraceTools also supports the definition of callbacks, which can be called by the GUI application to\r\nexecute actions in the application. Also provides parameters for the callbacks. This supports at early points\r\nof your development if triggers or interfaces to your application cannot be served by a gui or other applications.\r\n\r\nYaTraceTool required QT for build and at runtime (for lib, server and gui).\r\n\r\nContains:\r\n\r\n* TraceLib: C++ Library for binding to your application to receive trace messages and handle callback\r\n* TraceServer: Network Server for central collection of trace messages from applications\r\n* TraceClient: GUI Application for connection to a trace server. Shows Messages, apply filters and execute callbacks\r\n\r\nBelow images show the main gui component, the TraceClient application. On The left pane the traces process with their hierarchical scopes are listed. To disable the scopes or change scop level, just de-/active them.\r\n\r\nOn the right pane the output from the Scope sender with the message time is shown. Enter and exit of scopes are displayed if enabled.\r\n\r\n![](https://raw2.github.com/kreuzberger/YaTraceTool/master/doc/images/YaTraceClient.png)\r\n\r\n[For detailed usage look here!](https://raw2.github.com/kreuzberger/YaTraceTool/master/doc/Usage.md)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}